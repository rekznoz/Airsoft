1752380048
8a0c4faa9771445189035ca844487507-phpdoc%3Ac988473cdf52509210cb8f058a8377f7-69473b059d5158ddb658877c8f0573e6
s:54624:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjIwOiJFbmdsaXNoSW5mbGVjdG9yLnBocCI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjE6e3M6MzU6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MzU6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6OToiSW5mbGVjdG9yIjt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjE6e3M6NTI6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEVuZ2xpc2hJbmZsZWN0b3IiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxNTp7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGltcGxlbWVudHMiO2E6MTp7czo1NDoiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcSW5mbGVjdG9ySW50ZXJmYWNlIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTQ6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEluZmxlY3RvckludGVyZmFjZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE4OiJJbmZsZWN0b3JJbnRlcmZhY2UiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGNvbnN0YW50cyI7YTozOntzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvclxFbmdsaXNoSW5mbGVjdG9yOjpQTFVSQUxfTUFQIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50Ijo5OntzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjE4NTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6UExVUkFMX01BUCI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEwOiJQTFVSQUxfTUFQIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjQwOiJNYXAgRW5nbGlzaCBwbHVyYWwgdG8gc2luZ3VsYXIgc3VmZml4ZXMuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQyOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xTZWUiOjM6e3M6NzoiACoAbmFtZSI7czozOiJzZWUiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtOO3M6OToiACoAcmVmZXJzIjtPOjUyOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xSZWZlcmVuY2VcVXJsIjoxOntzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUmVmZXJlbmNlXFVybAB1cmkiO3M6NDU6Imh0dHA6Ly9lbmdsaXNoLXpvbmUuY29tL3NwZWxsaW5nL3BsdXJhbHMuaHRtbCI7fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czozNDoiU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvciI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AHZhbHVlIjtzOjQxOTM6IlsKICAgIC8vIEZpcnN0IGVudHJ5OiBwbHVyYWwgc3VmZml4LCByZXZlcnNlZAogICAgLy8gU2Vjb25kIGVudHJ5OiBsZW5ndGggb2YgcGx1cmFsIHN1ZmZpeAogICAgLy8gVGhpcmQgZW50cnk6IFdoZXRoZXIgdGhlIHN1ZmZpeCBtYXkgc3VjY2VlZCBhIHZvd2VsCiAgICAvLyBGb3VydGggZW50cnk6IFdoZXRoZXIgdGhlIHN1ZmZpeCBtYXkgc3VjY2VlZCBhIGNvbnNvbmFudAogICAgLy8gRmlmdGggZW50cnk6IHNpbmd1bGFyIHN1ZmZpeCwgbm9ybWFsCiAgICAvLyBiYWN0ZXJpYSAoYmFjdGVyaXVtKQogICAgWydhaXJldGNhYicsIDgsIHRydWUsIHRydWUsICdiYWN0ZXJpdW0nXSwKICAgIC8vIGNvcnBvcmEgKGNvcnB1cykKICAgIFsnYXJvcHJvYycsIDcsIHRydWUsIHRydWUsICdjb3JwdXMnXSwKICAgIC8vIGNyaXRlcmlhIChjcml0ZXJpb24pCiAgICBbJ2FpcmV0aXJjJywgOCwgdHJ1ZSwgdHJ1ZSwgJ2NyaXRlcmlvbiddLAogICAgLy8gY3VycmljdWxhIChjdXJyaWN1bHVtKQogICAgWydhbHVjaXJydWMnLCA5LCB0cnVlLCB0cnVlLCAnY3VycmljdWx1bSddLAogICAgLy8gcXVvcmEgKHF1b3J1bSkKICAgIFsnYXJvdXEnLCA1LCB0cnVlLCB0cnVlLCAncXVvcnVtJ10sCiAgICAvLyBnZW5lcmEgKGdlbnVzKQogICAgWydhcmVuZWcnLCA2LCB0cnVlLCB0cnVlLCAnZ2VudXMnXSwKICAgIC8vIG1lZGlhIChtZWRpdW0pCiAgICBbJ2FpZGVtJywgNSwgdHJ1ZSwgdHJ1ZSwgJ21lZGl1bSddLAogICAgLy8gbWVtb3JhbmRhIChtZW1vcmFuZHVtKQogICAgWydhZG5hcm9tZW0nLCA5LCB0cnVlLCB0cnVlLCAnbWVtb3JhbmR1bSddLAogICAgLy8gcGhlbm9tZW5hIChwaGVub21lbm9uKQogICAgWydhbmVtb25laHAnLCA5LCB0cnVlLCB0cnVlLCAncGhlbm9tZW5vbiddLAogICAgLy8gc3RyYXRhIChzdHJhdHVtKQogICAgWydhdGFydHMnLCA2LCB0cnVlLCB0cnVlLCAnc3RyYXR1bSddLAogICAgLy8gbmVidWxhZSAobmVidWxhKQogICAgWydlYScsIDIsIHRydWUsIHRydWUsICdhJ10sCiAgICAvLyBzZXJ2aWNlcyAoc2VydmljZSkKICAgIFsnc2VjaXZyZXMnLCA4LCB0cnVlLCB0cnVlLCAnc2VydmljZSddLAogICAgLy8gbWljZSAobW91c2UpLCBsaWNlIChsb3VzZSkKICAgIFsnZWNpJywgMywgZmFsc2UsIHRydWUsICdvdXNlJ10sCiAgICAvLyBnZWVzZSAoZ29vc2UpCiAgICBbJ2VzZWUnLCA0LCBmYWxzZSwgdHJ1ZSwgJ29vc2UnXSwKICAgIC8vIGZ1bmdpIChmdW5ndXMpLCBhbHVtbmkgKGFsdW1udXMpLCBzeWxsYWJpIChzeWxsYWJ1cyksIHJhZGlpIChyYWRpdXMpCiAgICBbJ2knLCAxLCB0cnVlLCB0cnVlLCAndXMnXSwKICAgIC8vIG1lbiAobWFuKSwgd29tZW4gKHdvbWFuKQogICAgWyduZW0nLCAzLCB0cnVlLCB0cnVlLCAnbWFuJ10sCiAgICAvLyBjaGlsZHJlbiAoY2hpbGQpCiAgICBbJ25lcmRsaWhjJywgOCwgdHJ1ZSwgdHJ1ZSwgJ2NoaWxkJ10sCiAgICAvLyBveGVuIChveCkKICAgIFsnbmV4bycsIDQsIGZhbHNlLCBmYWxzZSwgJ294J10sCiAgICAvLyBpbmRpY2VzIChpbmRleCksIGFwcGVuZGljZXMgKGFwcGVuZGl4KSwgcHJpY2VzIChwcmljZSkKICAgIFsnc2VjaScsIDQsIGZhbHNlLCB0cnVlLCBbJ2V4JywgJ2l4JywgJ2ljZSddXSwKICAgIC8vIGNvZGVzIChjb2RlKQogICAgWydzZWRvYycsIDUsIGZhbHNlLCB0cnVlLCAnY29kZSddLAogICAgLy8gc2VsZmllcyAoc2VsZmllKQogICAgWydzZWlmbGVzJywgNywgdHJ1ZSwgdHJ1ZSwgJ3NlbGZpZSddLAogICAgLy8gem9tYmllcyAoem9tYmllKQogICAgWydzZWlibW96JywgNywgdHJ1ZSwgdHJ1ZSwgJ3pvbWJpZSddLAogICAgLy8gbW92aWVzIChtb3ZpZSkKICAgIFsnc2Vpdm9tJywgNiwgdHJ1ZSwgdHJ1ZSwgJ21vdmllJ10sCiAgICAvLyBuYW1lcyAobmFtZSkKICAgIFsnc2VtYW4nLCA1LCB0cnVlLCBmYWxzZSwgJ25hbWUnXSwKICAgIC8vIGNvbnNwZWN0dXNlcyAoY29uc3BlY3R1cyksIHByb3NwZWN0dXNlcyAocHJvc3BlY3R1cykKICAgIFsnc2VzdXRjZXAnLCA4LCB0cnVlLCB0cnVlLCAncGVjdHVzJ10sCiAgICAvLyBmZWV0IChmb290KQogICAgWyd0ZWVmJywgNCwgdHJ1ZSwgdHJ1ZSwgJ2Zvb3QnXSwKICAgIC8vIGdlZXNlIChnb29zZSkKICAgIFsnZXNlZWcnLCA1LCB0cnVlLCB0cnVlLCAnZ29vc2UnXSwKICAgIC8vIHRlZXRoICh0b290aCkKICAgIFsnaHRlZXQnLCA1LCB0cnVlLCB0cnVlLCAndG9vdGgnXSwKICAgIC8vIG5ld3MgKG5ld3MpCiAgICBbJ3N3ZW4nLCA0LCB0cnVlLCB0cnVlLCAnbmV3cyddLAogICAgLy8gc2VyaWVzIChzZXJpZXMpCiAgICBbJ3NlaXJlcycsIDYsIHRydWUsIHRydWUsICdzZXJpZXMnXSwKICAgIC8vIGJhYmllcyAoYmFieSkKICAgIFsnc2VpJywgMywgZmFsc2UsIHRydWUsICd5J10sCiAgICAvLyBhY2Nlc3NlcyAoYWNjZXNzKSwgYWRkcmVzc2VzIChhZGRyZXNzKSwga2lzc2VzIChraXNzKQogICAgWydzZXNzJywgNCwgdHJ1ZSwgZmFsc2UsICdzcyddLAogICAgLy8gc3RhdHVzZXMgKHN0YXR1cykKICAgIFsnc2VzdXRhdHMnLCA4LCB0cnVlLCB0cnVlLCAnc3RhdHVzJ10sCiAgICAvLyBhcnRpY2xlIChhcnRpY2xlcyksIGFuY2xlIChhbmNsZXMpCiAgICBbJ3NlbCcsIDMsIHRydWUsIHRydWUsICdsZSddLAogICAgLy8gYW5hbHlzZXMgKGFuYWx5c2lzKSwgZWxsaXBzZXMgKGVsbGlwc2lzKSwgZnVuZ2kgKGZ1bmd1cyksCiAgICAvLyBuZXVyb3NlcyAobmV1cm9zaXMpLCB0aGVzZXMgKHRoZXNpcyksIGVtcGhhc2VzIChlbXBoYXNpcyksCiAgICAvLyBvYXNlcyAob2FzaXMpLCBjcmlzZXMgKGNyaXNpcyksIGhvdXNlcyAoaG91c2UpLCBiYXNlcyAoYmFzZSksCiAgICAvLyBhdGxhc2VzIChhdGxhcykKICAgIFsnc2VzJywgMywgdHJ1ZSwgdHJ1ZSwgWydzJywgJ3NlJywgJ3NpcyddXSwKICAgIC8vIG9iamVjdGl2ZXMgKG9iamVjdGl2ZSksIGFsdGVybmF0aXZlIChhbHRlcm5hdGl2ZXMpCiAgICBbJ3Nldml0JywgNSwgdHJ1ZSwgdHJ1ZSwgJ3RpdmUnXSwKICAgIC8vIGRyaXZlcyAoZHJpdmUpCiAgICBbJ3NldmlyZCcsIDYsIGZhbHNlLCB0cnVlLCAnZHJpdmUnXSwKICAgIC8vIGxpdmVzIChsaWZlKSwgd2l2ZXMgKHdpZmUpCiAgICBbJ3NldmknLCA0LCBmYWxzZSwgdHJ1ZSwgJ2lmZSddLAogICAgLy8gbW92ZXMgKG1vdmUpCiAgICBbJ3Nldm9tJywgNSwgdHJ1ZSwgdHJ1ZSwgJ21vdmUnXSwKICAgIC8vIGhvb3ZlcyAoaG9vZiksIGR3YXJ2ZXMgKGR3YXJmKSwgZWx2ZXMgKGVsZiksIGxlYXZlcyAobGVhZiksIGNhdmVzIChjYXZlKSwgc3RhdmVzIChzdGFmZikKICAgIFsnc2V2JywgMywgdHJ1ZSwgdHJ1ZSwgWydmJywgJ3ZlJywgJ2ZmJ11dLAogICAgLy8gYXhlcyAoYXhpcyksIGF4ZXMgKGF4KSwgYXhlcyAoYXhlKQogICAgWydzZXhhJywgNCwgZmFsc2UsIGZhbHNlLCBbJ2F4JywgJ2F4ZScsICdheGlzJ11dLAogICAgLy8gaW5kZXhlcyAoaW5kZXgpLCBtYXRyaXhlcyAobWF0cml4KQogICAgWydzZXgnLCAzLCB0cnVlLCBmYWxzZSwgJ3gnXSwKICAgIC8vIHF1aXp6ZXMgKHF1aXopCiAgICBbJ3NlenonLCA0LCB0cnVlLCBmYWxzZSwgJ3onXSwKICAgIC8vIGJ1cmVhdXMgKGJ1cmVhdSkKICAgIFsnc3VhZScsIDQsIGZhbHNlLCB0cnVlLCAnZWF1J10sCiAgICAvLyBmZWVzIChmZWUpLCB0cmVlcyAodHJlZSksIGVtcGxveWVlcyAoZW1wbG95ZWUpCiAgICBbJ3NlZScsIDMsIHRydWUsIHRydWUsICdlZSddLAogICAgLy8gZWRnZXMgKGVkZ2UpCiAgICBbJ3NlZ2QnLCA0LCB0cnVlLCB0cnVlLCAnZGdlJ10sCiAgICAvLyByb3NlcyAocm9zZSksIGdhcmFnZXMgKGdhcmFnZSksIGNhc3NldHRlcyAoY2Fzc2V0dGUpLAogICAgLy8gd2FsdHplcyAod2FsdHopLCBoZXJvZXMgKGhlcm8pLCBidXNoZXMgKGJ1c2gpLCBhcmNoZXMgKGFyY2gpLAogICAgLy8gc2hvZXMgKHNob2UpCiAgICBbJ3NlJywgMiwgdHJ1ZSwgdHJ1ZSwgWycnLCAnZSddXSwKICAgIC8vIHN0YXR1cyAoc3RhdHVzKQogICAgWydzdXRhdHMnLCA2LCB0cnVlLCB0cnVlLCAnc3RhdHVzJ10sCiAgICAvLyB0YWdzICh0YWcpCiAgICBbJ3MnLCAxLCB0cnVlLCB0cnVlLCAnJ10sCiAgICAvLyBjaGF0ZWF1eCAoY2hhdGVhdSkKICAgIFsneHVhZScsIDQsIGZhbHNlLCB0cnVlLCAnZWF1J10sCiAgICAvLyBwZW9wbGUgKHBlcnNvbikKICAgIFsnZWxwb2VwJywgNiwgdHJ1ZSwgdHJ1ZSwgJ3BlcnNvbiddLApdIjtzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABmaW5hbCI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AG1ldGFkYXRhIjthOjA6e31zOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABhdHRyaWJ1dGVzIjthOjA6e319czo2NjoiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6U0lOR1VMQVJfTUFQIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50Ijo5OntzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTkyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozNzQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjY6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEVuZ2xpc2hJbmZsZWN0b3I6OlNJTkdVTEFSX01BUCI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEyOiJTSU5HVUxBUl9NQVAiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDA6Ik1hcCBFbmdsaXNoIHNpbmd1bGFyIHRvIHBsdXJhbCBzdWZmaXhlcy4iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MTp7aTowO086NDI6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFNlZSI6Mzp7czo3OiIAKgBuYW1lIjtzOjM6InNlZSI7czoxNDoiACoAZGVzY3JpcHRpb24iO047czo5OiIAKgByZWZlcnMiO086NTI6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJlZmVyZW5jZVxVcmwiOjE6e3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xSZWZlcmVuY2VcVXJsAHVyaSI7czo0NToiaHR0cDovL2VuZ2xpc2gtem9uZS5jb20vc3BlbGxpbmcvcGx1cmFscy5odG1sIjt9fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6NDA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudAB2YWx1ZSI7czo0NTA0OiJbCiAgICAvLyBGaXJzdCBlbnRyeTogc2luZ3VsYXIgc3VmZml4LCByZXZlcnNlZAogICAgLy8gU2Vjb25kIGVudHJ5OiBsZW5ndGggb2Ygc2luZ3VsYXIgc3VmZml4CiAgICAvLyBUaGlyZCBlbnRyeTogV2hldGhlciB0aGUgc3VmZml4IG1heSBzdWNjZWVkIGEgdm93ZWwKICAgIC8vIEZvdXJ0aCBlbnRyeTogV2hldGhlciB0aGUgc3VmZml4IG1heSBzdWNjZWVkIGEgY29uc29uYW50CiAgICAvLyBGaWZ0aCBlbnRyeTogcGx1cmFsIHN1ZmZpeCwgbm9ybWFsCiAgICAvLyBheGVzIChheGlzKQogICAgWydzaXhhJywgNCwgZmFsc2UsIGZhbHNlLCAnYXhlcyddLAogICAgLy8gY3JpdGVyaW9uIChjcml0ZXJpYSkKICAgIFsnYWlyZXRpcmMnLCA4LCBmYWxzZSwgZmFsc2UsICdjcml0ZXJpb24nXSwKICAgIC8vIG5lYnVsYWUgKG5lYnVsYSkKICAgIFsnYWx1YmVuJywgNiwgZmFsc2UsIGZhbHNlLCAnbmVidWxhZSddLAogICAgLy8gY2hpbGRyZW4gKGNoaWxkKQogICAgWydkbGloYycsIDUsIHRydWUsIHRydWUsICdjaGlsZHJlbiddLAogICAgLy8gcHJpY2VzIChwcmljZSkKICAgIFsnZWNpJywgMywgZmFsc2UsIHRydWUsICdpY2VzJ10sCiAgICAvLyBzZXJ2aWNlcyAoc2VydmljZSkKICAgIFsnZWNpdnJlcycsIDcsIHRydWUsIHRydWUsICdzZXJ2aWNlcyddLAogICAgLy8gbGl2ZXMgKGxpZmUpLCB3aXZlcyAod2lmZSkKICAgIFsnZWZpJywgMywgZmFsc2UsIHRydWUsICdpdmVzJ10sCiAgICAvLyBzZWxmaWVzIChzZWxmaWUpCiAgICBbJ2VpZmxlcycsIDYsIHRydWUsIHRydWUsICdzZWxmaWVzJ10sCiAgICAvLyBtb3ZpZXMgKG1vdmllKQogICAgWydlaXZvbScsIDUsIHRydWUsIHRydWUsICdtb3ZpZXMnXSwKICAgIC8vIGxpY2UgKGxvdXNlKQogICAgWydlc3VvbCcsIDUsIGZhbHNlLCB0cnVlLCAnbGljZSddLAogICAgLy8gbWljZSAobW91c2UpCiAgICBbJ2VzdW9tJywgNSwgZmFsc2UsIHRydWUsICdtaWNlJ10sCiAgICAvLyBnZWVzZSAoZ29vc2UpCiAgICBbJ2Vzb28nLCA0LCBmYWxzZSwgdHJ1ZSwgJ2Vlc2UnXSwKICAgIC8vIGhvdXNlcyAoaG91c2UpLCBiYXNlcyAoYmFzZSkKICAgIFsnZXMnLCAyLCB0cnVlLCB0cnVlLCAnc2VzJ10sCiAgICAvLyBnZWVzZSAoZ29vc2UpCiAgICBbJ2Vzb29nJywgNSwgdHJ1ZSwgdHJ1ZSwgJ2dlZXNlJ10sCiAgICAvLyBjYXZlcyAoY2F2ZSkKICAgIFsnZXYnLCAyLCB0cnVlLCB0cnVlLCAndmVzJ10sCiAgICAvLyBkcml2ZXMgKGRyaXZlKQogICAgWydldmlyZCcsIDUsIGZhbHNlLCB0cnVlLCAnZHJpdmVzJ10sCiAgICAvLyBvYmplY3RpdmVzIChvYmplY3RpdmUpLCBhbHRlcm5hdGl2ZSAoYWx0ZXJuYXRpdmVzKQogICAgWydldml0JywgNCwgdHJ1ZSwgdHJ1ZSwgJ3RpdmVzJ10sCiAgICAvLyBtb3ZlcyAobW92ZSkKICAgIFsnZXZvbScsIDQsIHRydWUsIHRydWUsICdtb3ZlcyddLAogICAgLy8gc3RhdmVzIChzdGFmZikKICAgIFsnZmZhdHMnLCA1LCB0cnVlLCB0cnVlLCAnc3RhdmVzJ10sCiAgICAvLyBob292ZXMgKGhvb2YpLCBkd2FydmVzIChkd2FyZiksIGVsdmVzIChlbGYpLCBsZWF2ZXMgKGxlYWYpCiAgICBbJ2ZmJywgMiwgdHJ1ZSwgdHJ1ZSwgJ2ZmcyddLAogICAgLy8gaG9vdmVzIChob29mKSwgZHdhcnZlcyAoZHdhcmYpLCBlbHZlcyAoZWxmKSwgbGVhdmVzIChsZWFmKQogICAgWydmJywgMSwgdHJ1ZSwgdHJ1ZSwgWydmcycsICd2ZXMnXV0sCiAgICAvLyBhcmNoZXMgKGFyY2gpCiAgICBbJ2hjJywgMiwgdHJ1ZSwgdHJ1ZSwgJ2NoZXMnXSwKICAgIC8vIGJ1c2hlcyAoYnVzaCkKICAgIFsnaHMnLCAyLCB0cnVlLCB0cnVlLCAnc2hlcyddLAogICAgLy8gdGVldGggKHRvb3RoKQogICAgWydodG9vdCcsIDUsIHRydWUsIHRydWUsICd0ZWV0aCddLAogICAgLy8gYWxidW1zIChhbGJ1bSkKICAgIFsnbXVibGEnLCA1LCB0cnVlLCB0cnVlLCAnYWxidW1zJ10sCiAgICAvLyBxdW9ydW1zIChxdW9ydW0pCiAgICBbJ211cm91cScsIDYsIHRydWUsIHRydWUsIFsncXVvcmEnLCAncXVvcnVtcyddXSwKICAgIC8vIGJhY3RlcmlhIChiYWN0ZXJpdW0pLCBjdXJyaWN1bGEgKGN1cnJpY3VsdW0pLCBtZWRpYSAobWVkaXVtKSwgbWVtb3JhbmRhIChtZW1vcmFuZHVtKSwgcGhlbm9tZW5hIChwaGVub21lbm9uKSwgc3RyYXRhIChzdHJhdHVtKQogICAgWydtdScsIDIsIHRydWUsIHRydWUsICdhJ10sCiAgICAvLyBtZW4gKG1hbiksIHdvbWVuICh3b21hbikKICAgIFsnbmFtJywgMywgdHJ1ZSwgdHJ1ZSwgJ21lbiddLAogICAgLy8gcGVvcGxlIChwZXJzb24pCiAgICBbJ25vc3JlcCcsIDYsIHRydWUsIHRydWUsIFsncGVyc29ucycsICdwZW9wbGUnXV0sCiAgICAvLyBjcml0ZXJpYSAoY3JpdGVyaW9uKQogICAgWydub2lyZXRpcmMnLCA5LCB0cnVlLCB0cnVlLCAnY3JpdGVyaWEnXSwKICAgIC8vIHBoZW5vbWVuYSAocGhlbm9tZW5vbikKICAgIFsnbm9uZW1vbmVocCcsIDEwLCB0cnVlLCB0cnVlLCAncGhlbm9tZW5hJ10sCiAgICAvLyBlY2hvZXMgKGVjaG8pCiAgICBbJ29oY2UnLCA0LCB0cnVlLCB0cnVlLCAnZWNob2VzJ10sCiAgICAvLyBoZXJvZXMgKGhlcm8pCiAgICBbJ29yZWgnLCA0LCB0cnVlLCB0cnVlLCAnaGVyb2VzJ10sCiAgICAvLyBhdGxhc2VzIChhdGxhcykKICAgIFsnc2FsdGEnLCA1LCB0cnVlLCB0cnVlLCAnYXRsYXNlcyddLAogICAgLy8gYWxpYXNlcyAoYWxpYXMpCiAgICBbJ3NhaWxhJywgNSwgdHJ1ZSwgdHJ1ZSwgJ2FsaWFzZXMnXSwKICAgIC8vIGlyaXNlcyAoaXJpcykKICAgIFsnc2lyaScsIDQsIHRydWUsIHRydWUsICdpcmlzZXMnXSwKICAgIC8vIGFuYWx5c2VzIChhbmFseXNpcyksIGVsbGlwc2VzIChlbGxpcHNpcyksIG5ldXJvc2VzIChuZXVyb3NpcykKICAgIC8vIHRoZXNlcyAodGhlc2lzKSwgZW1waGFzZXMgKGVtcGhhc2lzKSwgb2FzZXMgKG9hc2lzKSwKICAgIC8vIGNyaXNlcyAoY3Jpc2lzKQogICAgWydzaXMnLCAzLCB0cnVlLCB0cnVlLCAnc2VzJ10sCiAgICAvLyBhY2Nlc3NlcyAoYWNjZXNzKSwgYWRkcmVzc2VzIChhZGRyZXNzKSwga2lzc2VzIChraXNzKQogICAgWydzcycsIDIsIHRydWUsIGZhbHNlLCAnc3NlcyddLAogICAgLy8gc3lsbGFiaSAoc3lsbGFidXMpCiAgICBbJ3N1YmFsbHlzJywgOCwgdHJ1ZSwgdHJ1ZSwgJ3N5bGxhYmknXSwKICAgIC8vIGJ1c2VzIChidXMpCiAgICBbJ3N1YicsIDMsIHRydWUsIHRydWUsICdidXNlcyddLAogICAgLy8gY2lyY3VzZXMgKGNpcmN1cykKICAgIFsnc3VjJywgMywgdHJ1ZSwgdHJ1ZSwgJ2N1c2VzJ10sCiAgICAvLyBoaXBwb2NhbXBpIChoaXBwb2NhbXB1cykKICAgIFsnc3VwbWFjb3BwaWgnLCAxMSwgZmFsc2UsIGZhbHNlLCAnaGlwcG9jYW1waSddLAogICAgLy8gY2FtcHVzZXMgKGNhbXB1cykKICAgIFsnc3VwJywgMywgdHJ1ZSwgdHJ1ZSwgJ3B1c2VzJ10sCiAgICAvLyBzdGF0dXMgKHN0YXR1cykKICAgIFsnc3V0YXRzJywgNiwgdHJ1ZSwgdHJ1ZSwgWydzdGF0dXMnLCAnc3RhdHVzZXMnXV0sCiAgICAvLyBjb25zcGVjdHVzZXMgKGNvbnNwZWN0dXMpLCBwcm9zcGVjdHVzZXMgKHByb3NwZWN0dXMpCiAgICBbJ3N1dGNlcCcsIDYsIHRydWUsIHRydWUsICdwZWN0dXNlcyddLAogICAgLy8gZnVuZ2kgKGZ1bmd1cyksIGFsdW1uaSAoYWx1bW51cyksIHN5bGxhYmkgKHN5bGxhYnVzKSwgcmFkaWkgKHJhZGl1cykKICAgIFsnc3UnLCAyLCB0cnVlLCB0cnVlLCAnaSddLAogICAgLy8gbmV3cyAobmV3cykKICAgIFsnc3dlbicsIDQsIHRydWUsIHRydWUsICduZXdzJ10sCiAgICAvLyBmZWV0IChmb290KQogICAgWyd0b29mJywgNCwgdHJ1ZSwgdHJ1ZSwgJ2ZlZXQnXSwKICAgIC8vIGNoYXRlYXV4IChjaGF0ZWF1KSwgYnVyZWF1cyAoYnVyZWF1KQogICAgWyd1YWUnLCAzLCBmYWxzZSwgdHJ1ZSwgWydlYXVzJywgJ2VhdXgnXV0sCiAgICAvLyBveGVuIChveCkKICAgIFsneG8nLCAyLCBmYWxzZSwgZmFsc2UsICdveGVuJ10sCiAgICAvLyBob2F4ZXMgKGhvYXgpCiAgICBbJ3hhb2gnLCA0LCB0cnVlLCBmYWxzZSwgJ2hvYXhlcyddLAogICAgLy8gaW5kaWNlcyAoaW5kZXgpCiAgICBbJ3hlZG5pJywgNSwgZmFsc2UsIHRydWUsIFsnaW5kaWNpZXMnLCAnaW5kZXhlcyddXSwKICAgIC8vIGZheCAoZmF4ZXMsIGZheHhlcykKICAgIFsneGFmJywgMywgdHJ1ZSwgdHJ1ZSwgWydmYXhlcycsICdmYXh4ZXMnXV0sCiAgICAvLyBib3hlcyAoYm94KQogICAgWyd4bycsIDIsIGZhbHNlLCB0cnVlLCAnb3hlcyddLAogICAgLy8gaW5kZXhlcyAoaW5kZXgpLCBtYXRyaXhlcyAobWF0cml4KSwgYXBwZW5kaWNlcyAoYXBwZW5kaXgpCiAgICBbJ3gnLCAxLCB0cnVlLCBmYWxzZSwgWydjZXMnLCAneGVzJ11dLAogICAgLy8gYmFiaWVzIChiYWJ5KQogICAgWyd5JywgMSwgZmFsc2UsIHRydWUsICdpZXMnXSwKICAgIC8vIHF1aXp6ZXMgKHF1aXopCiAgICBbJ3ppdXEnLCA0LCB0cnVlLCBmYWxzZSwgJ3F1aXp6ZXMnXSwKICAgIC8vIHdhbHR6ZXMgKHdhbHR6KQogICAgWyd6JywgMSwgdHJ1ZSwgdHJ1ZSwgJ3plcyddLApdIjtzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABmaW5hbCI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AG1ldGFkYXRhIjthOjA6e31zOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABhdHRyaWJ1dGVzIjthOjA6e319czo2NToiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6VU5JTkZMRUNURUQiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQiOjk6e3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozNzk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjQzMjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NToiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6VU5JTkZMRUNURUQiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiVU5JTkZMRUNURUQiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NTY6IkEgbGlzdCBvZiB3b3JkcyB3aGljaCBzaG91bGQgbm90IGJlIGluZmxlY3RlZCwgcmV2ZXJzZWQuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6NDA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudAB2YWx1ZSI7czo0OTk6IlsKICAgICcnLAogICAgLy8gZGF0YQogICAgJ2F0YWQnLAogICAgLy8gZGVlcgogICAgJ3JlZWQnLAogICAgLy8gZXF1aXBtZW50CiAgICAndG5lbXBpdXFlJywKICAgIC8vIGZlZWRiYWNrCiAgICAna2NhYmRlZWYnLAogICAgLy8gZmlzaAogICAgJ2hzaWYnLAogICAgLy8gaGVhbHRoCiAgICAnaHRsYWVoJywKICAgIC8vIGhpc3RvcnkKICAgICd5cm90c2loJywKICAgIC8vIGluZm8KICAgICdvZm5pJywKICAgIC8vIGluZm9ybWF0aW9uCiAgICAnbm9pdGFtcm9mbmknLAogICAgLy8gbW9uZXkKICAgICd5ZW5vbScsCiAgICAvLyBtb29zZQogICAgJ2Vzb29tJywKICAgIC8vIHNlcmllcwogICAgJ3NlaXJlcycsCiAgICAvLyBzaGVlcAogICAgJ3BlZWhzJywKICAgIC8vIHNwZWNpZXMKICAgICdzZWljZXBzJywKICAgIC8vIHRyYWZmaWMKICAgICdjaWZmYXJ0JywKICAgIC8vIGFpcmNyYWZ0CiAgICAndGZhcmNyaWEnLAogICAgLy8gaGFyZHdhcmUKICAgICdlcmF3ZHJhaCcsCl0iO3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGZpbmFsIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAbWV0YWRhdGEiO2E6MDp7fXM6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGF0dHJpYnV0ZXMiO2E6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHByb3BlcnRpZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjI6e3M6Njc6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEVuZ2xpc2hJbmZsZWN0b3I6OnNpbmd1bGFyaXplKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMzp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjY6InBsdXJhbCI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NDM0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjExMjA3O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjUwODtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxNDE4Mzt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY3OiJcU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvclxFbmdsaXNoSW5mbGVjdG9yOjpzaW5ndWxhcml6ZSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6InNpbmd1bGFyaXplIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXR0cmlidXRlcyI7YTowOnt9fXM6NjU6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEVuZ2xpc2hJbmZsZWN0b3I6OnBsdXJhbGl6ZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTM6e3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJzaW5ndWxhciI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NTEwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjE0MTkwO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjU4NTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxNzIxMzt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY1OiJcU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvclxFbmdsaXNoSW5mbGVjdG9yOjpwbHVyYWxpemUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjk6InBsdXJhbGl6ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGF0dHJpYnV0ZXMiO2E6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo1ODY7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTI6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEVuZ2xpc2hJbmZsZWN0b3IiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNjoiRW5nbGlzaEluZmxlY3RvciI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBkb2NCbG9jayI7TjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcGFyZW50IjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmaW5hbCI7YjoxO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwByZWFkT25seSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRhZGF0YSI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGF0dHJpYnV0ZXMiO2E6MDp7fX19czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBoYXNoIjtzOjMyOiI2OTQ3M2IwNTlkNTE1OGRkYjY1ODg3N2M4ZjA1NzNlNiI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjUyOiJ2ZW5kb3Ivc3ltZm9ueS9zdHJpbmcvSW5mbGVjdG9yL0VuZ2xpc2hJbmZsZWN0b3IucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoxNzIxNzoiPD9waHAKCi8qCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTeW1mb255IHBhY2thZ2UuCiAqCiAqIChjKSBGYWJpZW4gUG90ZW5jaWVyIDxmYWJpZW5Ac3ltZm9ueS5jb20+CiAqCiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLgogKi8KCm5hbWVzcGFjZSBTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yOwoKZmluYWwgY2xhc3MgRW5nbGlzaEluZmxlY3RvciBpbXBsZW1lbnRzIEluZmxlY3RvckludGVyZmFjZQp7CiAgICAvKioKICAgICAqIE1hcCBFbmdsaXNoIHBsdXJhbCB0byBzaW5ndWxhciBzdWZmaXhlcy4KICAgICAqCiAgICAgKiBAc2VlIGh0dHA6Ly9lbmdsaXNoLXpvbmUuY29tL3NwZWxsaW5nL3BsdXJhbHMuaHRtbAogICAgICovCiAgICBwcml2YXRlIGNvbnN0IFBMVVJBTF9NQVAgPSBbCiAgICAgICAgLy8gRmlyc3QgZW50cnk6IHBsdXJhbCBzdWZmaXgsIHJldmVyc2VkCiAgICAgICAgLy8gU2Vjb25kIGVudHJ5OiBsZW5ndGggb2YgcGx1cmFsIHN1ZmZpeAogICAgICAgIC8vIFRoaXJkIGVudHJ5OiBXaGV0aGVyIHRoZSBzdWZmaXggbWF5IHN1Y2NlZWQgYSB2b3dlbAogICAgICAgIC8vIEZvdXJ0aCBlbnRyeTogV2hldGhlciB0aGUgc3VmZml4IG1heSBzdWNjZWVkIGEgY29uc29uYW50CiAgICAgICAgLy8gRmlmdGggZW50cnk6IHNpbmd1bGFyIHN1ZmZpeCwgbm9ybWFsCgogICAgICAgIC8vIGJhY3RlcmlhIChiYWN0ZXJpdW0pCiAgICAgICAgWydhaXJldGNhYicsIDgsIHRydWUsIHRydWUsICdiYWN0ZXJpdW0nXSwKCiAgICAgICAgLy8gY29ycG9yYSAoY29ycHVzKQogICAgICAgIFsnYXJvcHJvYycsIDcsIHRydWUsIHRydWUsICdjb3JwdXMnXSwKCiAgICAgICAgLy8gY3JpdGVyaWEgKGNyaXRlcmlvbikKICAgICAgICBbJ2FpcmV0aXJjJywgOCwgdHJ1ZSwgdHJ1ZSwgJ2NyaXRlcmlvbiddLAoKICAgICAgICAvLyBjdXJyaWN1bGEgKGN1cnJpY3VsdW0pCiAgICAgICAgWydhbHVjaXJydWMnLCA5LCB0cnVlLCB0cnVlLCAnY3VycmljdWx1bSddLAoKICAgICAgICAvLyBxdW9yYSAocXVvcnVtKQogICAgICAgIFsnYXJvdXEnLCA1LCB0cnVlLCB0cnVlLCAncXVvcnVtJ10sCgogICAgICAgIC8vIGdlbmVyYSAoZ2VudXMpCiAgICAgICAgWydhcmVuZWcnLCA2LCB0cnVlLCB0cnVlLCAnZ2VudXMnXSwKCiAgICAgICAgLy8gbWVkaWEgKG1lZGl1bSkKICAgICAgICBbJ2FpZGVtJywgNSwgdHJ1ZSwgdHJ1ZSwgJ21lZGl1bSddLAoKICAgICAgICAvLyBtZW1vcmFuZGEgKG1lbW9yYW5kdW0pCiAgICAgICAgWydhZG5hcm9tZW0nLCA5LCB0cnVlLCB0cnVlLCAnbWVtb3JhbmR1bSddLAoKICAgICAgICAvLyBwaGVub21lbmEgKHBoZW5vbWVub24pCiAgICAgICAgWydhbmVtb25laHAnLCA5LCB0cnVlLCB0cnVlLCAncGhlbm9tZW5vbiddLAoKICAgICAgICAvLyBzdHJhdGEgKHN0cmF0dW0pCiAgICAgICAgWydhdGFydHMnLCA2LCB0cnVlLCB0cnVlLCAnc3RyYXR1bSddLAoKICAgICAgICAvLyBuZWJ1bGFlIChuZWJ1bGEpCiAgICAgICAgWydlYScsIDIsIHRydWUsIHRydWUsICdhJ10sCgogICAgICAgIC8vIHNlcnZpY2VzIChzZXJ2aWNlKQogICAgICAgIFsnc2VjaXZyZXMnLCA4LCB0cnVlLCB0cnVlLCAnc2VydmljZSddLAoKICAgICAgICAvLyBtaWNlIChtb3VzZSksIGxpY2UgKGxvdXNlKQogICAgICAgIFsnZWNpJywgMywgZmFsc2UsIHRydWUsICdvdXNlJ10sCgogICAgICAgIC8vIGdlZXNlIChnb29zZSkKICAgICAgICBbJ2VzZWUnLCA0LCBmYWxzZSwgdHJ1ZSwgJ29vc2UnXSwKCiAgICAgICAgLy8gZnVuZ2kgKGZ1bmd1cyksIGFsdW1uaSAoYWx1bW51cyksIHN5bGxhYmkgKHN5bGxhYnVzKSwgcmFkaWkgKHJhZGl1cykKICAgICAgICBbJ2knLCAxLCB0cnVlLCB0cnVlLCAndXMnXSwKCiAgICAgICAgLy8gbWVuIChtYW4pLCB3b21lbiAod29tYW4pCiAgICAgICAgWyduZW0nLCAzLCB0cnVlLCB0cnVlLCAnbWFuJ10sCgogICAgICAgIC8vIGNoaWxkcmVuIChjaGlsZCkKICAgICAgICBbJ25lcmRsaWhjJywgOCwgdHJ1ZSwgdHJ1ZSwgJ2NoaWxkJ10sCgogICAgICAgIC8vIG94ZW4gKG94KQogICAgICAgIFsnbmV4bycsIDQsIGZhbHNlLCBmYWxzZSwgJ294J10sCgogICAgICAgIC8vIGluZGljZXMgKGluZGV4KSwgYXBwZW5kaWNlcyAoYXBwZW5kaXgpLCBwcmljZXMgKHByaWNlKQogICAgICAgIFsnc2VjaScsIDQsIGZhbHNlLCB0cnVlLCBbJ2V4JywgJ2l4JywgJ2ljZSddXSwKCiAgICAgICAgLy8gY29kZXMgKGNvZGUpCiAgICAgICAgWydzZWRvYycsIDUsIGZhbHNlLCB0cnVlLCAnY29kZSddLAoKICAgICAgICAvLyBzZWxmaWVzIChzZWxmaWUpCiAgICAgICAgWydzZWlmbGVzJywgNywgdHJ1ZSwgdHJ1ZSwgJ3NlbGZpZSddLAoKICAgICAgICAvLyB6b21iaWVzICh6b21iaWUpCiAgICAgICAgWydzZWlibW96JywgNywgdHJ1ZSwgdHJ1ZSwgJ3pvbWJpZSddLAoKICAgICAgICAvLyBtb3ZpZXMgKG1vdmllKQogICAgICAgIFsnc2Vpdm9tJywgNiwgdHJ1ZSwgdHJ1ZSwgJ21vdmllJ10sCgogICAgICAgIC8vIG5hbWVzIChuYW1lKQogICAgICAgIFsnc2VtYW4nLCA1LCB0cnVlLCBmYWxzZSwgJ25hbWUnXSwKCiAgICAgICAgLy8gY29uc3BlY3R1c2VzIChjb25zcGVjdHVzKSwgcHJvc3BlY3R1c2VzIChwcm9zcGVjdHVzKQogICAgICAgIFsnc2VzdXRjZXAnLCA4LCB0cnVlLCB0cnVlLCAncGVjdHVzJ10sCgogICAgICAgIC8vIGZlZXQgKGZvb3QpCiAgICAgICAgWyd0ZWVmJywgNCwgdHJ1ZSwgdHJ1ZSwgJ2Zvb3QnXSwKCiAgICAgICAgLy8gZ2Vlc2UgKGdvb3NlKQogICAgICAgIFsnZXNlZWcnLCA1LCB0cnVlLCB0cnVlLCAnZ29vc2UnXSwKCiAgICAgICAgLy8gdGVldGggKHRvb3RoKQogICAgICAgIFsnaHRlZXQnLCA1LCB0cnVlLCB0cnVlLCAndG9vdGgnXSwKCiAgICAgICAgLy8gbmV3cyAobmV3cykKICAgICAgICBbJ3N3ZW4nLCA0LCB0cnVlLCB0cnVlLCAnbmV3cyddLAoKICAgICAgICAvLyBzZXJpZXMgKHNlcmllcykKICAgICAgICBbJ3NlaXJlcycsIDYsIHRydWUsIHRydWUsICdzZXJpZXMnXSwKCiAgICAgICAgLy8gYmFiaWVzIChiYWJ5KQogICAgICAgIFsnc2VpJywgMywgZmFsc2UsIHRydWUsICd5J10sCgogICAgICAgIC8vIGFjY2Vzc2VzIChhY2Nlc3MpLCBhZGRyZXNzZXMgKGFkZHJlc3MpLCBraXNzZXMgKGtpc3MpCiAgICAgICAgWydzZXNzJywgNCwgdHJ1ZSwgZmFsc2UsICdzcyddLAoKICAgICAgICAvLyBzdGF0dXNlcyAoc3RhdHVzKQogICAgICAgIFsnc2VzdXRhdHMnLCA4LCB0cnVlLCB0cnVlLCAnc3RhdHVzJ10sCgogICAgICAgIC8vIGFydGljbGUgKGFydGljbGVzKSwgYW5jbGUgKGFuY2xlcykKICAgICAgICBbJ3NlbCcsIDMsIHRydWUsIHRydWUsICdsZSddLAoKICAgICAgICAvLyBhbmFseXNlcyAoYW5hbHlzaXMpLCBlbGxpcHNlcyAoZWxsaXBzaXMpLCBmdW5naSAoZnVuZ3VzKSwKICAgICAgICAvLyBuZXVyb3NlcyAobmV1cm9zaXMpLCB0aGVzZXMgKHRoZXNpcyksIGVtcGhhc2VzIChlbXBoYXNpcyksCiAgICAgICAgLy8gb2FzZXMgKG9hc2lzKSwgY3Jpc2VzIChjcmlzaXMpLCBob3VzZXMgKGhvdXNlKSwgYmFzZXMgKGJhc2UpLAogICAgICAgIC8vIGF0bGFzZXMgKGF0bGFzKQogICAgICAgIFsnc2VzJywgMywgdHJ1ZSwgdHJ1ZSwgWydzJywgJ3NlJywgJ3NpcyddXSwKCiAgICAgICAgLy8gb2JqZWN0aXZlcyAob2JqZWN0aXZlKSwgYWx0ZXJuYXRpdmUgKGFsdGVybmF0aXZlcykKICAgICAgICBbJ3Nldml0JywgNSwgdHJ1ZSwgdHJ1ZSwgJ3RpdmUnXSwKCiAgICAgICAgLy8gZHJpdmVzIChkcml2ZSkKICAgICAgICBbJ3NldmlyZCcsIDYsIGZhbHNlLCB0cnVlLCAnZHJpdmUnXSwKCiAgICAgICAgLy8gbGl2ZXMgKGxpZmUpLCB3aXZlcyAod2lmZSkKICAgICAgICBbJ3NldmknLCA0LCBmYWxzZSwgdHJ1ZSwgJ2lmZSddLAoKICAgICAgICAvLyBtb3ZlcyAobW92ZSkKICAgICAgICBbJ3Nldm9tJywgNSwgdHJ1ZSwgdHJ1ZSwgJ21vdmUnXSwKCiAgICAgICAgLy8gaG9vdmVzIChob29mKSwgZHdhcnZlcyAoZHdhcmYpLCBlbHZlcyAoZWxmKSwgbGVhdmVzIChsZWFmKSwgY2F2ZXMgKGNhdmUpLCBzdGF2ZXMgKHN0YWZmKQogICAgICAgIFsnc2V2JywgMywgdHJ1ZSwgdHJ1ZSwgWydmJywgJ3ZlJywgJ2ZmJ11dLAoKICAgICAgICAvLyBheGVzIChheGlzKSwgYXhlcyAoYXgpLCBheGVzIChheGUpCiAgICAgICAgWydzZXhhJywgNCwgZmFsc2UsIGZhbHNlLCBbJ2F4JywgJ2F4ZScsICdheGlzJ11dLAoKICAgICAgICAvLyBpbmRleGVzIChpbmRleCksIG1hdHJpeGVzIChtYXRyaXgpCiAgICAgICAgWydzZXgnLCAzLCB0cnVlLCBmYWxzZSwgJ3gnXSwKCiAgICAgICAgLy8gcXVpenplcyAocXVpeikKICAgICAgICBbJ3NlenonLCA0LCB0cnVlLCBmYWxzZSwgJ3onXSwKCiAgICAgICAgLy8gYnVyZWF1cyAoYnVyZWF1KQogICAgICAgIFsnc3VhZScsIDQsIGZhbHNlLCB0cnVlLCAnZWF1J10sCgogICAgICAgIC8vIGZlZXMgKGZlZSksIHRyZWVzICh0cmVlKSwgZW1wbG95ZWVzIChlbXBsb3llZSkKICAgICAgICBbJ3NlZScsIDMsIHRydWUsIHRydWUsICdlZSddLAoKICAgICAgICAvLyBlZGdlcyAoZWRnZSkKICAgICAgICBbJ3NlZ2QnLCA0LCB0cnVlLCB0cnVlLCAnZGdlJ10sCgogICAgICAgIC8vIHJvc2VzIChyb3NlKSwgZ2FyYWdlcyAoZ2FyYWdlKSwgY2Fzc2V0dGVzIChjYXNzZXR0ZSksCiAgICAgICAgLy8gd2FsdHplcyAod2FsdHopLCBoZXJvZXMgKGhlcm8pLCBidXNoZXMgKGJ1c2gpLCBhcmNoZXMgKGFyY2gpLAogICAgICAgIC8vIHNob2VzIChzaG9lKQogICAgICAgIFsnc2UnLCAyLCB0cnVlLCB0cnVlLCBbJycsICdlJ11dLAoKICAgICAgICAvLyBzdGF0dXMgKHN0YXR1cykKICAgICAgICBbJ3N1dGF0cycsIDYsIHRydWUsIHRydWUsICdzdGF0dXMnXSwKCiAgICAgICAgLy8gdGFncyAodGFnKQogICAgICAgIFsncycsIDEsIHRydWUsIHRydWUsICcnXSwKCiAgICAgICAgLy8gY2hhdGVhdXggKGNoYXRlYXUpCiAgICAgICAgWyd4dWFlJywgNCwgZmFsc2UsIHRydWUsICdlYXUnXSwKCiAgICAgICAgLy8gcGVvcGxlIChwZXJzb24pCiAgICAgICAgWydlbHBvZXAnLCA2LCB0cnVlLCB0cnVlLCAncGVyc29uJ10sCiAgICBdOwoKICAgIC8qKgogICAgICogTWFwIEVuZ2xpc2ggc2luZ3VsYXIgdG8gcGx1cmFsIHN1ZmZpeGVzLgogICAgICoKICAgICAqIEBzZWUgaHR0cDovL2VuZ2xpc2gtem9uZS5jb20vc3BlbGxpbmcvcGx1cmFscy5odG1sCiAgICAgKi8KICAgIHByaXZhdGUgY29uc3QgU0lOR1VMQVJfTUFQID0gWwogICAgICAgIC8vIEZpcnN0IGVudHJ5OiBzaW5ndWxhciBzdWZmaXgsIHJldmVyc2VkCiAgICAgICAgLy8gU2Vjb25kIGVudHJ5OiBsZW5ndGggb2Ygc2luZ3VsYXIgc3VmZml4CiAgICAgICAgLy8gVGhpcmQgZW50cnk6IFdoZXRoZXIgdGhlIHN1ZmZpeCBtYXkgc3VjY2VlZCBhIHZvd2VsCiAgICAgICAgLy8gRm91cnRoIGVudHJ5OiBXaGV0aGVyIHRoZSBzdWZmaXggbWF5IHN1Y2NlZWQgYSBjb25zb25hbnQKICAgICAgICAvLyBGaWZ0aCBlbnRyeTogcGx1cmFsIHN1ZmZpeCwgbm9ybWFsCgogICAgICAgIC8vIGF4ZXMgKGF4aXMpCiAgICAgICAgWydzaXhhJywgNCwgZmFsc2UsIGZhbHNlLCAnYXhlcyddLAoKICAgICAgICAvLyBjcml0ZXJpb24gKGNyaXRlcmlhKQogICAgICAgIFsnYWlyZXRpcmMnLCA4LCBmYWxzZSwgZmFsc2UsICdjcml0ZXJpb24nXSwKCiAgICAgICAgLy8gbmVidWxhZSAobmVidWxhKQogICAgICAgIFsnYWx1YmVuJywgNiwgZmFsc2UsIGZhbHNlLCAnbmVidWxhZSddLAoKICAgICAgICAvLyBjaGlsZHJlbiAoY2hpbGQpCiAgICAgICAgWydkbGloYycsIDUsIHRydWUsIHRydWUsICdjaGlsZHJlbiddLAoKICAgICAgICAvLyBwcmljZXMgKHByaWNlKQogICAgICAgIFsnZWNpJywgMywgZmFsc2UsIHRydWUsICdpY2VzJ10sCgogICAgICAgIC8vIHNlcnZpY2VzIChzZXJ2aWNlKQogICAgICAgIFsnZWNpdnJlcycsIDcsIHRydWUsIHRydWUsICdzZXJ2aWNlcyddLAoKICAgICAgICAvLyBsaXZlcyAobGlmZSksIHdpdmVzICh3aWZlKQogICAgICAgIFsnZWZpJywgMywgZmFsc2UsIHRydWUsICdpdmVzJ10sCgogICAgICAgIC8vIHNlbGZpZXMgKHNlbGZpZSkKICAgICAgICBbJ2VpZmxlcycsIDYsIHRydWUsIHRydWUsICdzZWxmaWVzJ10sCgogICAgICAgIC8vIG1vdmllcyAobW92aWUpCiAgICAgICAgWydlaXZvbScsIDUsIHRydWUsIHRydWUsICdtb3ZpZXMnXSwKCiAgICAgICAgLy8gbGljZSAobG91c2UpCiAgICAgICAgWydlc3VvbCcsIDUsIGZhbHNlLCB0cnVlLCAnbGljZSddLAoKICAgICAgICAvLyBtaWNlIChtb3VzZSkKICAgICAgICBbJ2VzdW9tJywgNSwgZmFsc2UsIHRydWUsICdtaWNlJ10sCgogICAgICAgIC8vIGdlZXNlIChnb29zZSkKICAgICAgICBbJ2Vzb28nLCA0LCBmYWxzZSwgdHJ1ZSwgJ2Vlc2UnXSwKCiAgICAgICAgLy8gaG91c2VzIChob3VzZSksIGJhc2VzIChiYXNlKQogICAgICAgIFsnZXMnLCAyLCB0cnVlLCB0cnVlLCAnc2VzJ10sCgogICAgICAgIC8vIGdlZXNlIChnb29zZSkKICAgICAgICBbJ2Vzb29nJywgNSwgdHJ1ZSwgdHJ1ZSwgJ2dlZXNlJ10sCgogICAgICAgIC8vIGNhdmVzIChjYXZlKQogICAgICAgIFsnZXYnLCAyLCB0cnVlLCB0cnVlLCAndmVzJ10sCgogICAgICAgIC8vIGRyaXZlcyAoZHJpdmUpCiAgICAgICAgWydldmlyZCcsIDUsIGZhbHNlLCB0cnVlLCAnZHJpdmVzJ10sCgogICAgICAgIC8vIG9iamVjdGl2ZXMgKG9iamVjdGl2ZSksIGFsdGVybmF0aXZlIChhbHRlcm5hdGl2ZXMpCiAgICAgICAgWydldml0JywgNCwgdHJ1ZSwgdHJ1ZSwgJ3RpdmVzJ10sCgogICAgICAgIC8vIG1vdmVzIChtb3ZlKQogICAgICAgIFsnZXZvbScsIDQsIHRydWUsIHRydWUsICdtb3ZlcyddLAoKICAgICAgICAvLyBzdGF2ZXMgKHN0YWZmKQogICAgICAgIFsnZmZhdHMnLCA1LCB0cnVlLCB0cnVlLCAnc3RhdmVzJ10sCgogICAgICAgIC8vIGhvb3ZlcyAoaG9vZiksIGR3YXJ2ZXMgKGR3YXJmKSwgZWx2ZXMgKGVsZiksIGxlYXZlcyAobGVhZikKICAgICAgICBbJ2ZmJywgMiwgdHJ1ZSwgdHJ1ZSwgJ2ZmcyddLAoKICAgICAgICAvLyBob292ZXMgKGhvb2YpLCBkd2FydmVzIChkd2FyZiksIGVsdmVzIChlbGYpLCBsZWF2ZXMgKGxlYWYpCiAgICAgICAgWydmJywgMSwgdHJ1ZSwgdHJ1ZSwgWydmcycsICd2ZXMnXV0sCgogICAgICAgIC8vIGFyY2hlcyAoYXJjaCkKICAgICAgICBbJ2hjJywgMiwgdHJ1ZSwgdHJ1ZSwgJ2NoZXMnXSwKCiAgICAgICAgLy8gYnVzaGVzIChidXNoKQogICAgICAgIFsnaHMnLCAyLCB0cnVlLCB0cnVlLCAnc2hlcyddLAoKICAgICAgICAvLyB0ZWV0aCAodG9vdGgpCiAgICAgICAgWydodG9vdCcsIDUsIHRydWUsIHRydWUsICd0ZWV0aCddLAoKICAgICAgICAvLyBhbGJ1bXMgKGFsYnVtKQogICAgICAgIFsnbXVibGEnLCA1LCB0cnVlLCB0cnVlLCAnYWxidW1zJ10sCgogICAgICAgIC8vIHF1b3J1bXMgKHF1b3J1bSkKICAgICAgICBbJ211cm91cScsIDYsIHRydWUsIHRydWUsIFsncXVvcmEnLCAncXVvcnVtcyddXSwKCiAgICAgICAgLy8gYmFjdGVyaWEgKGJhY3Rlcml1bSksIGN1cnJpY3VsYSAoY3VycmljdWx1bSksIG1lZGlhIChtZWRpdW0pLCBtZW1vcmFuZGEgKG1lbW9yYW5kdW0pLCBwaGVub21lbmEgKHBoZW5vbWVub24pLCBzdHJhdGEgKHN0cmF0dW0pCiAgICAgICAgWydtdScsIDIsIHRydWUsIHRydWUsICdhJ10sCgogICAgICAgIC8vIG1lbiAobWFuKSwgd29tZW4gKHdvbWFuKQogICAgICAgIFsnbmFtJywgMywgdHJ1ZSwgdHJ1ZSwgJ21lbiddLAoKICAgICAgICAvLyBwZW9wbGUgKHBlcnNvbikKICAgICAgICBbJ25vc3JlcCcsIDYsIHRydWUsIHRydWUsIFsncGVyc29ucycsICdwZW9wbGUnXV0sCgogICAgICAgIC8vIGNyaXRlcmlhIChjcml0ZXJpb24pCiAgICAgICAgWydub2lyZXRpcmMnLCA5LCB0cnVlLCB0cnVlLCAnY3JpdGVyaWEnXSwKCiAgICAgICAgLy8gcGhlbm9tZW5hIChwaGVub21lbm9uKQogICAgICAgIFsnbm9uZW1vbmVocCcsIDEwLCB0cnVlLCB0cnVlLCAncGhlbm9tZW5hJ10sCgogICAgICAgIC8vIGVjaG9lcyAoZWNobykKICAgICAgICBbJ29oY2UnLCA0LCB0cnVlLCB0cnVlLCAnZWNob2VzJ10sCgogICAgICAgIC8vIGhlcm9lcyAoaGVybykKICAgICAgICBbJ29yZWgnLCA0LCB0cnVlLCB0cnVlLCAnaGVyb2VzJ10sCgogICAgICAgIC8vIGF0bGFzZXMgKGF0bGFzKQogICAgICAgIFsnc2FsdGEnLCA1LCB0cnVlLCB0cnVlLCAnYXRsYXNlcyddLAoKICAgICAgICAvLyBhbGlhc2VzIChhbGlhcykKICAgICAgICBbJ3NhaWxhJywgNSwgdHJ1ZSwgdHJ1ZSwgJ2FsaWFzZXMnXSwKCiAgICAgICAgLy8gaXJpc2VzIChpcmlzKQogICAgICAgIFsnc2lyaScsIDQsIHRydWUsIHRydWUsICdpcmlzZXMnXSwKCiAgICAgICAgLy8gYW5hbHlzZXMgKGFuYWx5c2lzKSwgZWxsaXBzZXMgKGVsbGlwc2lzKSwgbmV1cm9zZXMgKG5ldXJvc2lzKQogICAgICAgIC8vIHRoZXNlcyAodGhlc2lzKSwgZW1waGFzZXMgKGVtcGhhc2lzKSwgb2FzZXMgKG9hc2lzKSwKICAgICAgICAvLyBjcmlzZXMgKGNyaXNpcykKICAgICAgICBbJ3NpcycsIDMsIHRydWUsIHRydWUsICdzZXMnXSwKCiAgICAgICAgLy8gYWNjZXNzZXMgKGFjY2VzcyksIGFkZHJlc3NlcyAoYWRkcmVzcyksIGtpc3NlcyAoa2lzcykKICAgICAgICBbJ3NzJywgMiwgdHJ1ZSwgZmFsc2UsICdzc2VzJ10sCgogICAgICAgIC8vIHN5bGxhYmkgKHN5bGxhYnVzKQogICAgICAgIFsnc3ViYWxseXMnLCA4LCB0cnVlLCB0cnVlLCAnc3lsbGFiaSddLAoKICAgICAgICAvLyBidXNlcyAoYnVzKQogICAgICAgIFsnc3ViJywgMywgdHJ1ZSwgdHJ1ZSwgJ2J1c2VzJ10sCgogICAgICAgIC8vIGNpcmN1c2VzIChjaXJjdXMpCiAgICAgICAgWydzdWMnLCAzLCB0cnVlLCB0cnVlLCAnY3VzZXMnXSwKCiAgICAgICAgLy8gaGlwcG9jYW1waSAoaGlwcG9jYW1wdXMpCiAgICAgICAgWydzdXBtYWNvcHBpaCcsIDExLCBmYWxzZSwgZmFsc2UsICdoaXBwb2NhbXBpJ10sCgogICAgICAgIC8vIGNhbXB1c2VzIChjYW1wdXMpCiAgICAgICAgWydzdXAnLCAzLCB0cnVlLCB0cnVlLCAncHVzZXMnXSwKCiAgICAgICAgLy8gc3RhdHVzIChzdGF0dXMpCiAgICAgICAgWydzdXRhdHMnLCA2LCB0cnVlLCB0cnVlLCBbJ3N0YXR1cycsICdzdGF0dXNlcyddXSwKCiAgICAgICAgLy8gY29uc3BlY3R1c2VzIChjb25zcGVjdHVzKSwgcHJvc3BlY3R1c2VzIChwcm9zcGVjdHVzKQogICAgICAgIFsnc3V0Y2VwJywgNiwgdHJ1ZSwgdHJ1ZSwgJ3BlY3R1c2VzJ10sCgogICAgICAgIC8vIGZ1bmdpIChmdW5ndXMpLCBhbHVtbmkgKGFsdW1udXMpLCBzeWxsYWJpIChzeWxsYWJ1cyksIHJhZGlpIChyYWRpdXMpCiAgICAgICAgWydzdScsIDIsIHRydWUsIHRydWUsICdpJ10sCgogICAgICAgIC8vIG5ld3MgKG5ld3MpCiAgICAgICAgWydzd2VuJywgNCwgdHJ1ZSwgdHJ1ZSwgJ25ld3MnXSwKCiAgICAgICAgLy8gZmVldCAoZm9vdCkKICAgICAgICBbJ3Rvb2YnLCA0LCB0cnVlLCB0cnVlLCAnZmVldCddLAoKICAgICAgICAvLyBjaGF0ZWF1eCAoY2hhdGVhdSksIGJ1cmVhdXMgKGJ1cmVhdSkKICAgICAgICBbJ3VhZScsIDMsIGZhbHNlLCB0cnVlLCBbJ2VhdXMnLCAnZWF1eCddXSwKCiAgICAgICAgLy8gb3hlbiAob3gpCiAgICAgICAgWyd4bycsIDIsIGZhbHNlLCBmYWxzZSwgJ294ZW4nXSwKCiAgICAgICAgLy8gaG9heGVzIChob2F4KQogICAgICAgIFsneGFvaCcsIDQsIHRydWUsIGZhbHNlLCAnaG9heGVzJ10sCgogICAgICAgIC8vIGluZGljZXMgKGluZGV4KQogICAgICAgIFsneGVkbmknLCA1LCBmYWxzZSwgdHJ1ZSwgWydpbmRpY2llcycsICdpbmRleGVzJ11dLAoKICAgICAgICAvLyBmYXggKGZheGVzLCBmYXh4ZXMpCiAgICAgICAgWyd4YWYnLCAzLCB0cnVlLCB0cnVlLCBbJ2ZheGVzJywgJ2ZheHhlcyddXSwKCiAgICAgICAgLy8gYm94ZXMgKGJveCkKICAgICAgICBbJ3hvJywgMiwgZmFsc2UsIHRydWUsICdveGVzJ10sCgogICAgICAgIC8vIGluZGV4ZXMgKGluZGV4KSwgbWF0cml4ZXMgKG1hdHJpeCksIGFwcGVuZGljZXMgKGFwcGVuZGl4KQogICAgICAgIFsneCcsIDEsIHRydWUsIGZhbHNlLCBbJ2NlcycsICd4ZXMnXV0sCgogICAgICAgIC8vIGJhYmllcyAoYmFieSkKICAgICAgICBbJ3knLCAxLCBmYWxzZSwgdHJ1ZSwgJ2llcyddLAoKICAgICAgICAvLyBxdWl6emVzIChxdWl6KQogICAgICAgIFsneml1cScsIDQsIHRydWUsIGZhbHNlLCAncXVpenplcyddLAoKICAgICAgICAvLyB3YWx0emVzICh3YWx0eikKICAgICAgICBbJ3onLCAxLCB0cnVlLCB0cnVlLCAnemVzJ10sCiAgICBdOwoKICAgIC8qKgogICAgICogQSBsaXN0IG9mIHdvcmRzIHdoaWNoIHNob3VsZCBub3QgYmUgaW5mbGVjdGVkLCByZXZlcnNlZC4KICAgICAqLwogICAgcHJpdmF0ZSBjb25zdCBVTklORkxFQ1RFRCA9IFsKICAgICAgICAnJywKCiAgICAgICAgLy8gZGF0YQogICAgICAgICdhdGFkJywKCiAgICAgICAgLy8gZGVlcgogICAgICAgICdyZWVkJywKCiAgICAgICAgLy8gZXF1aXBtZW50CiAgICAgICAgJ3RuZW1waXVxZScsCgogICAgICAgIC8vIGZlZWRiYWNrCiAgICAgICAgJ2tjYWJkZWVmJywKCiAgICAgICAgLy8gZmlzaAogICAgICAgICdoc2lmJywKCiAgICAgICAgLy8gaGVhbHRoCiAgICAgICAgJ2h0bGFlaCcsCgogICAgICAgIC8vIGhpc3RvcnkKICAgICAgICAneXJvdHNpaCcsCgogICAgICAgIC8vIGluZm8KICAgICAgICAnb2ZuaScsCgogICAgICAgIC8vIGluZm9ybWF0aW9uCiAgICAgICAgJ25vaXRhbXJvZm5pJywKCiAgICAgICAgLy8gbW9uZXkKICAgICAgICAneWVub20nLAoKICAgICAgICAvLyBtb29zZQogICAgICAgICdlc29vbScsCgogICAgICAgIC8vIHNlcmllcwogICAgICAgICdzZWlyZXMnLAoKICAgICAgICAvLyBzaGVlcAogICAgICAgICdwZWVocycsCgogICAgICAgIC8vIHNwZWNpZXMKICAgICAgICAnc2VpY2VwcycsCgogICAgICAgIC8vIHRyYWZmaWMKICAgICAgICAnY2lmZmFydCcsCgogICAgICAgIC8vIGFpcmNyYWZ0CiAgICAgICAgJ3RmYXJjcmlhJywKCiAgICAgICAgLy8gaGFyZHdhcmUKICAgICAgICAnZXJhd2RyYWgnLAogICAgXTsKCiAgICBwdWJsaWMgZnVuY3Rpb24gc2luZ3VsYXJpemUoc3RyaW5nICRwbHVyYWwpOiBhcnJheQogICAgewogICAgICAgICRwbHVyYWxSZXYgPSBzdHJyZXYoJHBsdXJhbCk7CiAgICAgICAgJGxvd2VyUGx1cmFsUmV2ID0gc3RydG9sb3dlcigkcGx1cmFsUmV2KTsKICAgICAgICAkcGx1cmFsTGVuZ3RoID0gXHN0cmxlbigkbG93ZXJQbHVyYWxSZXYpOwoKICAgICAgICAvLyBDaGVjayBpZiB0aGUgd29yZCBpcyBvbmUgd2hpY2ggaXMgbm90IGluZmxlY3RlZCwgcmV0dXJuIGVhcmx5IGlmIHNvCiAgICAgICAgaWYgKFxpbl9hcnJheSgkbG93ZXJQbHVyYWxSZXYsIHNlbGY6OlVOSU5GTEVDVEVELCB0cnVlKSkgewogICAgICAgICAgICByZXR1cm4gWyRwbHVyYWxdOwogICAgICAgIH0KCiAgICAgICAgLy8gVGhlIG91dGVyIGxvb3AgaXRlcmF0ZXMgb3ZlciB0aGUgZW50cmllcyBvZiB0aGUgcGx1cmFsIHRhYmxlCiAgICAgICAgLy8gVGhlIGlubmVyIGxvb3AgJGogaXRlcmF0ZXMgb3ZlciB0aGUgY2hhcmFjdGVycyBvZiB0aGUgcGx1cmFsIHN1ZmZpeAogICAgICAgIC8vIGluIHRoZSBwbHVyYWwgdGFibGUgdG8gY29tcGFyZSB0aGVtIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgdGhlIGFjdHVhbAogICAgICAgIC8vIGdpdmVuIHBsdXJhbCBzdWZmaXgKICAgICAgICBmb3JlYWNoIChzZWxmOjpQTFVSQUxfTUFQIGFzICRtYXApIHsKICAgICAgICAgICAgJHN1ZmZpeCA9ICRtYXBbMF07CiAgICAgICAgICAgICRzdWZmaXhMZW5ndGggPSAkbWFwWzFdOwogICAgICAgICAgICAkaiA9IDA7CgogICAgICAgICAgICAvLyBDb21wYXJlIGNoYXJhY3RlcnMgaW4gdGhlIHBsdXJhbCB0YWJsZSBhbmQgb2YgdGhlIHN1ZmZpeCBvZiB0aGUKICAgICAgICAgICAgLy8gZ2l2ZW4gcGx1cmFsIG9uZSBieSBvbmUKICAgICAgICAgICAgd2hpbGUgKCRzdWZmaXhbJGpdID09PSAkbG93ZXJQbHVyYWxSZXZbJGpdKSB7CiAgICAgICAgICAgICAgICAvLyBMZXQgJGogcG9pbnQgdG8gdGhlIG5leHQgY2hhcmFjdGVyCiAgICAgICAgICAgICAgICArKyRqOwoKICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWxseSBjb21wYXJlZCB0aGUgbGFzdCBjaGFyYWN0ZXIKICAgICAgICAgICAgICAgIC8vIEFkZCBhbiBlbnRyeSB3aXRoIHRoZSBzaW5ndWxhciBzdWZmaXggdG8gdGhlIHNpbmd1bGFyIGFycmF5CiAgICAgICAgICAgICAgICBpZiAoJGogPT09ICRzdWZmaXhMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAvLyBJcyB0aGVyZSBhbnkgY2hhcmFjdGVyIHByZWNlZGluZyB0aGUgc3VmZml4IGluIHRoZSBwbHVyYWwgc3RyaW5nPwogICAgICAgICAgICAgICAgICAgIGlmICgkaiA8ICRwbHVyYWxMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG5leHRJc1Zvd2VsID0gc3RyX2NvbnRhaW5zKCdhZWlvdScsICRsb3dlclBsdXJhbFJldlskal0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkbWFwWzJdICYmICRuZXh0SXNWb3dlbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VmZml4IG1heSBub3Qgc3VjY2VlZCBhIHZvd2VsIGJ1dCBuZXh0IGNoYXIgaXMgb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkbWFwWzNdICYmICEkbmV4dElzVm93ZWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1ZmZpeCBtYXkgbm90IHN1Y2NlZWQgYSBjb25zb25hbnQgYnV0IG5leHQgY2hhciBpcyBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkbmV3QmFzZSA9IHN1YnN0cigkcGx1cmFsLCAwLCAkcGx1cmFsTGVuZ3RoIC0gJHN1ZmZpeExlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgJG5ld1N1ZmZpeCA9ICRtYXBbNF07CgogICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgcGx1cmFsIHN1ZmZpeAogICAgICAgICAgICAgICAgICAgIC8vIGlzIHVwcGVyY2FzZWQuIElmIHllcywgdXBwZXJjYXNlIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4KICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2luZ3VsYXIgc3VmZml4IHRvbwogICAgICAgICAgICAgICAgICAgICRmaXJzdFVwcGVyID0gY3R5cGVfdXBwZXIoJHBsdXJhbFJldlskaiAtIDFdKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKFxpc19hcnJheSgkbmV3U3VmZml4KSkgewogICAgICAgICAgICAgICAgICAgICAgICAkc2luZ3VsYXJzID0gW107CgogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkbmV3U3VmZml4IGFzICRuZXdTdWZmaXhFbnRyeSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNpbmd1bGFyc1tdID0gJG5ld0Jhc2UuKCRmaXJzdFVwcGVyID8gdWNmaXJzdCgkbmV3U3VmZml4RW50cnkpIDogJG5ld1N1ZmZpeEVudHJ5KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzaW5ndWxhcnM7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyRuZXdCYXNlLigkZmlyc3RVcHBlciA/IHVjZmlyc3QoJG5ld1N1ZmZpeCkgOiAkbmV3U3VmZml4KV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gU3VmZml4IGlzIGxvbmdlciB0aGFuIHdvcmQKICAgICAgICAgICAgICAgIGlmICgkaiA9PT0gJHBsdXJhbExlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBBc3N1bWUgdGhhdCBwbHVyYWwgYW5kIHNpbmd1bGFyIGlzIGlkZW50aWNhbAogICAgICAgIHJldHVybiBbJHBsdXJhbF07CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHBsdXJhbGl6ZShzdHJpbmcgJHNpbmd1bGFyKTogYXJyYXkKICAgIHsKICAgICAgICAkc2luZ3VsYXJSZXYgPSBzdHJyZXYoJHNpbmd1bGFyKTsKICAgICAgICAkbG93ZXJTaW5ndWxhclJldiA9IHN0cnRvbG93ZXIoJHNpbmd1bGFyUmV2KTsKICAgICAgICAkc2luZ3VsYXJMZW5ndGggPSBcc3RybGVuKCRsb3dlclNpbmd1bGFyUmV2KTsKCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHdvcmQgaXMgb25lIHdoaWNoIGlzIG5vdCBpbmZsZWN0ZWQsIHJldHVybiBlYXJseSBpZiBzbwogICAgICAgIGlmIChcaW5fYXJyYXkoJGxvd2VyU2luZ3VsYXJSZXYsIHNlbGY6OlVOSU5GTEVDVEVELCB0cnVlKSkgewogICAgICAgICAgICByZXR1cm4gWyRzaW5ndWxhcl07CiAgICAgICAgfQoKICAgICAgICAvLyBUaGUgb3V0ZXIgbG9vcCBpdGVyYXRlcyBvdmVyIHRoZSBlbnRyaWVzIG9mIHRoZSBzaW5ndWxhciB0YWJsZQogICAgICAgIC8vIFRoZSBpbm5lciBsb29wICRqIGl0ZXJhdGVzIG92ZXIgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIHNpbmd1bGFyIHN1ZmZpeAogICAgICAgIC8vIGluIHRoZSBzaW5ndWxhciB0YWJsZSB0byBjb21wYXJlIHRoZW0gd2l0aCB0aGUgY2hhcmFjdGVycyBvZiB0aGUgYWN0dWFsCiAgICAgICAgLy8gZ2l2ZW4gc2luZ3VsYXIgc3VmZml4CiAgICAgICAgZm9yZWFjaCAoc2VsZjo6U0lOR1VMQVJfTUFQIGFzICRtYXApIHsKICAgICAgICAgICAgJHN1ZmZpeCA9ICRtYXBbMF07CiAgICAgICAgICAgICRzdWZmaXhMZW5ndGggPSAkbWFwWzFdOwogICAgICAgICAgICAkaiA9IDA7CgogICAgICAgICAgICAvLyBDb21wYXJlIGNoYXJhY3RlcnMgaW4gdGhlIHNpbmd1bGFyIHRhYmxlIGFuZCBvZiB0aGUgc3VmZml4IG9mIHRoZQogICAgICAgICAgICAvLyBnaXZlbiBwbHVyYWwgb25lIGJ5IG9uZQoKICAgICAgICAgICAgd2hpbGUgKCRzdWZmaXhbJGpdID09PSAkbG93ZXJTaW5ndWxhclJldlskal0pIHsKICAgICAgICAgICAgICAgIC8vIExldCAkaiBwb2ludCB0byB0aGUgbmV4dCBjaGFyYWN0ZXIKICAgICAgICAgICAgICAgICsrJGo7CgogICAgICAgICAgICAgICAgLy8gU3VjY2Vzc2Z1bGx5IGNvbXBhcmVkIHRoZSBsYXN0IGNoYXJhY3RlcgogICAgICAgICAgICAgICAgLy8gQWRkIGFuIGVudHJ5IHdpdGggdGhlIHBsdXJhbCBzdWZmaXggdG8gdGhlIHBsdXJhbCBhcnJheQogICAgICAgICAgICAgICAgaWYgKCRqID09PSAkc3VmZml4TGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gSXMgdGhlcmUgYW55IGNoYXJhY3RlciBwcmVjZWRpbmcgdGhlIHN1ZmZpeCBpbiB0aGUgcGx1cmFsIHN0cmluZz8KICAgICAgICAgICAgICAgICAgICBpZiAoJGogPCAkc2luZ3VsYXJMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG5leHRJc1Zvd2VsID0gc3RyX2NvbnRhaW5zKCdhZWlvdScsICRsb3dlclNpbmd1bGFyUmV2WyRqXSk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRtYXBbMl0gJiYgJG5leHRJc1Zvd2VsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWZmaXggbWF5IG5vdCBzdWNjZWVkIGEgdm93ZWwgYnV0IG5leHQgY2hhciBpcyBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRtYXBbM10gJiYgISRuZXh0SXNWb3dlbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VmZml4IG1heSBub3Qgc3VjY2VlZCBhIGNvbnNvbmFudCBidXQgbmV4dCBjaGFyIGlzIG9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRuZXdCYXNlID0gc3Vic3RyKCRzaW5ndWxhciwgMCwgJHNpbmd1bGFyTGVuZ3RoIC0gJHN1ZmZpeExlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgJG5ld1N1ZmZpeCA9ICRtYXBbNF07CgogICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgc2luZ3VsYXIgc3VmZml4CiAgICAgICAgICAgICAgICAgICAgLy8gaXMgdXBwZXJjYXNlZC4gSWYgeWVzLCB1cHBlcmNhc2UgdGhlIGZpcnN0IGNoYXJhY3RlciBpbgogICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzaW5ndWxhciBzdWZmaXggdG9vCiAgICAgICAgICAgICAgICAgICAgJGZpcnN0VXBwZXIgPSBjdHlwZV91cHBlcigkc2luZ3VsYXJSZXZbJGogLSAxXSk7CgogICAgICAgICAgICAgICAgICAgIGlmIChcaXNfYXJyYXkoJG5ld1N1ZmZpeCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBsdXJhbHMgPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRuZXdTdWZmaXggYXMgJG5ld1N1ZmZpeEVudHJ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGx1cmFsc1tdID0gJG5ld0Jhc2UuKCRmaXJzdFVwcGVyID8gdWNmaXJzdCgkbmV3U3VmZml4RW50cnkpIDogJG5ld1N1ZmZpeEVudHJ5KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRwbHVyYWxzOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFskbmV3QmFzZS4oJGZpcnN0VXBwZXIgPyB1Y2ZpcnN0KCRuZXdTdWZmaXgpIDogJG5ld1N1ZmZpeCldOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFN1ZmZpeCBpcyBsb25nZXIgdGhhbiB3b3JkCiAgICAgICAgICAgICAgICBpZiAoJGogPT09ICRzaW5ndWxhckxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBBc3N1bWUgdGhhdCBwbHVyYWwgaXMgc2luZ3VsYXIgd2l0aCBhIHRyYWlsaW5nIGBzYAogICAgICAgIHJldHVybiBbJHNpbmd1bGFyLidzJ107CiAgICB9Cn0KIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGRvY0Jsb2NrIjtOO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";